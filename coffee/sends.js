// Generated by CoffeeScript 1.8.0
(function() {
  jQuery(function() {
    var areaPlotOptions, barPlotOptions, bucketLabels, buildTree, doRefresh, filteredData, fn, plotColors, processData, refreshAreaCharts, refreshBarChart, refreshContent, root, sendToRow, sendsToTable, setup, uniqueGrades, uniques;
    root = typeof global !== "undefined" && global !== null ? global : window;
    fn = root.$.fn;
    root.dateDelta = function(date1, date2) {
      return (Date.parse(date2) - Date.parse(date1)) / 60000 / 60 / 24 / 365;
    };
    _.capitalize = function(str) {
      return str[0].toUpperCase() + str.slice(1).toLowerCase();
    };
    root.trimZeroes = function(txt) {
      return txt.replace('V0', 'V').replace('5.0', '5.');
    };
    root.roundGrade = function(x) {
      var base, letter, remainder;
      if (x < 10) {
        return "V0" + (Math.floor(x));
      } else if (x < 20) {
        return "V" + (Math.floor(x));
      } else if (x < 510) {
        return "5.0" + (Math.floor(x - 500));
      } else {
        base = Math.floor(x) - 500;
        remainder = Math.round(100 * (x - Math.floor(x)));
        if (remainder < 20) {
          letter = 'a';
        } else if (remainder < 30) {
          letter = 'b';
        } else if (remainder < 40) {
          letter = 'c';
        } else {
          letter = 'd';
        }
        return "5." + base + letter;
      }
    };
    processData = function() {
      return root.processedData = _.map(root.data, function(x) {
        x.YearBucket = Math.floor(dateDelta(x.SendDate, Date()));
        x.GradeBucket = roundGrade(x.GradeSort);
        return x;
      });
    };
    uniqueGrades = function() {
      return _.chain(root.processedData).pluck('GradeBucket').unique().sort().value();
    };
    uniques = function() {
      return {
        grades: uniqueGrades(),
        boulder: $.grep(uniqueGrades(), function(x) {
          return x[0] === 'V';
        }),
        route: $.grep(uniqueGrades(), function(x) {
          return x[0] !== 'V';
        })
      };
    };
    filteredData = function() {
      var minBoulder, minRoute, unique;
      unique = uniques(root.processedData);
      minRoute = $.inArray($('#route_value').data('value'), unique.route);
      minBoulder = $.inArray($('#boulder_value').data('value'), unique.boulder);
      return $.grep(data, function(x) {
        return $.inArray(x.GradeBucket, unique.route) >= minRoute || $.inArray(x.GradeBucket, unique.boulder) >= minBoulder;
      });
    };
    plotColors = {
      "default": ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6"],
      defaultWithBlack: ["#000000", "#3366cc", "#dc3912", "#ff9900", "#109618", "#990099"],
      hot: ["#000000", "#7f0000", "#ff0000", "#ff7f00", "#ffff00", "#ffff7f", "#ffffff"]
    };
    bucketLabels = ['0 Years', '1 Year', '2 Years', '3 Years', '4 Years', '5+ Years'];
    barPlotOptions = {
      backgroundcolor: {
        stroke: 'black',
        strokewidth: 5,
        fill: '#e0e0e0'
      },
      colors: plotColors.hot,
      title: 'Sends by Year',
      titleTextStyle: {
        fontSize: 30
      },
      isStacked: true,
      hAxis: {
        maxAlternation: 1,
        slantedTextAngle: 45
      },
      vAxis: {
        gridlines: {
          color: 'gray'
        }
      }
    };
    refreshBarChart = function() {
      var bucketData, bucketRow, dt, row, sortedBuckets, x, yearBucket, _i, _j, _len, _len1, _ref;
      sortedBuckets = _.uniq($.map(filteredData(), function(x) {
        return x.GradeBucket;
      })).sort();
      bucketData = $.map(sortedBuckets, function(x) {
        return [[x, 0, 0, 0, 0, 0, 0]];
      });
      _ref = filteredData();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        yearBucket = row.YearBucket > 5 ? 5 : row.YearBucket;
        bucketRow = $.inArray(row.GradeBucket, $.map(bucketData, function(x) {
          return x[0];
        }));
        bucketData[bucketRow][yearBucket + 1] += 1;
      }
      bucketData = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = bucketData.length; _j < _len1; _j++) {
          x = bucketData[_j];
          _results.push([trimZeroes(x[0])].concat(x.slice(1)));
        }
        return _results;
      })();
      dt = new google.visualization.DataTable();
      dt.addColumn('string', 'Grade');
      for (_j = 0, _len1 = bucketLabels.length; _j < _len1; _j++) {
        x = bucketLabels[_j];
        dt.addColumn('number', x);
      }
      dt.addRows(bucketData);
      return new google.visualization.ColumnChart(document.getElementById('chartContainer')).draw(dt, barPlotOptions);
    };
    areaPlotOptions = {
      backgroundcolor: {
        stroke: 'black',
        strokewidth: 5,
        fill: '#e0e0e0'
      },
      title: 'Sends by Year',
      titleTextStyle: {
        fontSize: 30
      },
      isStacked: true,
      hAxis: {
        maxAlternation: 1,
        slantedTextAngle: 45
      },
      vAxis: {
        gridlines: {
          color: 'gray'
        }
      }
    };
    refreshAreaCharts = function() {
      var boulderData, combo, dtb, dtr, gradeList, routeData, sendCount, uniqueBoulderGrades, uniqueRouteGrades, uniqueYearList, x, yearList, _i, _j, _len, _len1;
      yearList = _.map(filteredData(), function(x) {
        return x.SendDate.slice(0, 4);
      });
      uniqueYearList = _.uniq(yearList).sort();
      gradeList = _.map(filteredData(), function(x) {
        return x.GradeBucket.slice(0, 4);
      });
      uniqueBoulderGrades = _.uniq(_.filter(gradeList, function(x) {
        return x[0] === 'V';
      })).sort().reverse();
      uniqueRouteGrades = _.uniq(_.filter(gradeList, function(x) {
        return x[0] !== 'V';
      })).sort().reverse();
      combo = _.zip(yearList, gradeList);
      sendCount = function(grade, year) {
        return _.filter(combo, function(x) {
          return x[0] === year && x[1] === grade;
        }).length;
      };
      routeData = _.map(uniqueYearList, function(year) {
        return [year].concat(_.map(uniqueRouteGrades, function(grade) {
          return sendCount(grade, year);
        }));
      });
      boulderData = _.map(uniqueYearList, function(year) {
        return [year].concat(_.map(uniqueBoulderGrades, function(grade) {
          return sendCount(grade, year);
        }));
      });
      dtb = new google.visualization.DataTable();
      dtb.addColumn('string', 'Year');
      for (_i = 0, _len = uniqueBoulderGrades.length; _i < _len; _i++) {
        x = uniqueBoulderGrades[_i];
        dtb.addColumn('number', x);
      }
      dtb.addRows(boulderData);
      dtr = new google.visualization.DataTable();
      dtr.addColumn('string', 'Year');
      for (_j = 0, _len1 = uniqueRouteGrades.length; _j < _len1; _j++) {
        x = uniqueRouteGrades[_j];
        dtr.addColumn('number', x);
      }
      dtr.addRows(routeData);
      new google.visualization.AreaChart(document.getElementById('routeArea')).draw(dtr, areaPlotOptions);
      return new google.visualization.AreaChart(document.getElementById('boulderArea')).draw(dtb, areaPlotOptions);
    };
    sendToRow = function(x) {
      return ["  <tr class='sends'>", "    <td>" + x.Grade + "</td>", "    <td><span title='" + x.Area + "'>" + x.Route + "</span></td>", "    <td class='" + x.Style + "'>" + x.SendDate + "</td>", "  </tr>"].join("\n");
    };
    sendsToTable = function(x) {
      return "<table>\n" + ($.map(x, sendToRow).join("\n")) + "\n</table>";
    };
    refreshContent = function() {
      var best, bestSends, fl, os, rp, _ref;
      _ref = ['redpoint', 'flash', 'onsight'], rp = _ref[0], fl = _ref[1], os = _ref[2];
      best = function(style, prefix) {
        return $.grep(_.sortBy(root.data, function(x) {
          return x.GradeSort;
        }).reverse(), function(x) {
          return x.Style === style && x.Grade[0] === prefix;
        })[0];
      };
      bestSends = [best(rp, '5'), best(fl, '5'), best(os, '5'), best(rp, 'V'), best(fl, 'V')];
      $('#best_sends').html($.map(bestSends, function(x) {
        var rb;
        rb = x.Grade[0] === '5' ? 'Route' : 'Boulder';
        return "" + rb + " " + (_.capitalize(x.Style)) + ": " + x.Route + " (" + x.Grade + ")<br>\n";
      }).join(''));
      $('#recent_sends').html($.map(_.sortBy(root.data, function(x) {
        return x.SendDate;
      }).reverse().slice(0, 5), function(x) {
        return "" + x.Route + " (" + x.Grade + ") " + (_.capitalize(x.Style)) + " " + x.SendDate + "<br>\n";
      }).join(''));
      $('#route_sends').html(sendsToTable($.grep(filteredData(), function(x) {
        return x.Grade[0] === '5';
      })));
      return $('#boulder_sends').html(sendsToTable($.grep(filteredData(), function(x) {
        return x.Grade[0] === 'V';
      })));
    };
    buildTree = function() {
      var areaList, html;
      html = "<ul class='tree'>\n";
      areaList = _.chain(processedData).pluck('Area').unique().value().sort();
      _.each(areaList, function(area) {
        var cragList;
        html = html.concat("  <li class='area'>" + area + "<ul style='display:none'>\n");
        cragList = _.chain(root.processedData).filter(function(x) {
          return x.Area === area;
        }).pluck('Cliff').unique().value().sort();
        _.each(cragList, function(crag) {
          var sendList;
          html = html.concat("    <li class='cliff'>" + crag + "\n    <ul style='display:none'>\n");
          sendList = _.chain(root.processedData).filter(function(x) {
            return x.Area === area && x.Cliff === crag;
          }).map(function(x) {
            return "      <li class='climb'>" + x.Route + " (" + x.Grade + ")";
          }).value().join("\n").concat("\n    </ul>\n");
          return html = html.concat(sendList);
        });
        return html = html.concat("  </ul>\n");
      });
      html = html.concat("</ul>");
      return $('#sends_by_area').html(html);
    };
    $('#route_value').data('value', '5.12a').text('5.12a');
    $('#boulder_value').data('value', 'V06').text('V6');
    setup = function() {
      var toggle, uniqueBoulder, uniqueRoute;
      uniqueRoute = uniques().route;
      uniqueBoulder = uniques().boulder;
      $('#route_slider').slider({
        value: $.inArray($('#route_value').data('value'), uniqueRoute),
        max: uniqueRoute.length - 1,
        stop: function() {
          return doRefresh();
        },
        slide: function(event, info) {
          var grade;
          grade = uniqueRoute[info.value];
          return $('#route_value').data('value', grade).text(trimZeroes(grade));
        }
      });
      $('#boulder_slider').slider({
        value: $.inArray($('#boulder_value').data('value'), uniqueBoulder),
        max: uniqueBoulder.length - 1,
        stop: function() {
          return doRefresh();
        },
        slide: function(event, info) {
          var grade;
          grade = uniqueBoulder[info.value];
          return $('#boulder_value').data('value', grade).text(trimZeroes(grade));
        }
      });
      $('#route_slider').position({
        my: 'left center',
        at: 'right center',
        of: '#route_value',
        offset: '12 0'
      });
      $('#boulder_value').position({
        my: 'left center',
        at: 'right center',
        of: '#route_slider',
        offset: '25 0'
      });
      $('#boulder_slider').position({
        my: 'left center',
        at: 'right center',
        of: '#boulder_value',
        offset: '12 0'
      });
      toggle = function(event) {
        $(this).children().toggle();
        return event.stopPropagation();
      };
      $('div#sends_by_area').on('click', 'li.area', toggle);
      return $('div#sends_by_area').on('click', 'li.cliff', toggle);
    };
    doRefresh = function() {
      refreshBarChart();
      refreshContent();
      return refreshAreaCharts();
    };
    if (root.data != null) {
      processData();
      setup();
      doRefresh();
      return buildTree();
    } else {
      return $.ajax({
        url: '/tables/Sends'
      }).done(function(x) {
        root.data = x;
        processData();
        setup();
        doRefresh();
        return buildTree();
      });
    }
  });

}).call(this);
