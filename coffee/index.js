// Generated by CoffeeScript 1.8.0
(function() {
  var Query, QueryCollection, QueryModel, QueryOrphans, SendView, TableListView, collectionToTable, convertTable, routeQuery, sendQuery,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sendQuery = 'SELECT\n  ascents.send_date         AS Date,\n  climbers.display          AS Climber,\n  routes.name               AS Route,\n  ascent_styles.style_name  AS Style,\n  grades.grade              AS Grade\nFROM ascents\nINNER JOIN climbers       ON ascents.climber_id = climbers.climber_id\nINNER JOIN routes         ON ascents.route_id   = routes.route_id\nINNER JOIN ascent_styles  ON ascents.style_id   = ascent_styles.style_id\nNATURAL JOIN grades\nWHERE climbers.enabled=1\nORDER BY Date DESC';

  routeQuery = 'SELECT\n  routes.route_id     AS ID,\n  routes.name         AS Route,\n  grades.grade        AS Grade,\n  cliffs.cliff_name   AS Cliff,\n  areas.area_name     AS Area,\n  grades.grade_sort   AS GradeSort,\n  grades.grade_class  AS RouteType\nFROM routes\n  NATURAL JOIN grades\n  NATURAL JOIN cliffs\n  NATURAL JOIN areas\nORDER BY Route';

  convertTable = function(x, tbl, id) {
    var collection, obj;
    collection = Backbone.Collection.extend({
      model: Backbone.Model.extend({
        idAttribute: id,
        table: tbl
      }),
      columns: _.keys(x[0]),
      idAttribute: id,
      url: "/tables/" + tbl,
      lookup: function(a, b) {
        return this.findWhere(_.object([a], [b]));
      }
    });
    obj = new collection(x);
    obj.on({
      change: function(obj, opt) {
        obj.save();
        return _.each(obj.changed, function(k, v) {
          return _.each(_.keys(obj.changed), function(k) {
            return console.log("" + k + ": " + (obj.previousAttributes()[k]) + " -> " + obj.changed[k]);
          });
        });
      },
      create: function(obj) {
        var keyText, valText;
        keyText = _.keys(obj.attributes).join(',');
        valText = "'" + _.values(obj.attributes).join("','") + "'";
        return console.log("INSERT INTO " + obj.table + " (" + keyText + ") VALUES (" + valText + ")");
      },
      remove: function(obj) {
        console.log("DELETE FROM " + obj.table + " WHERE " + obj.idAttribute + " = " + obj.id);
        return obj.destroy();
      }
    });
    return obj;
  };

  collectionToTable = function(m) {
    var k, tr;
    if (!_.isArray(m)) {
      m = m.toArray();
    }
    k = _.keys(m[0].toJSON());
    tr = _.map(m, function(a) {
      var td;
      td = _.map(k, function(b) {
        return a.get(b);
      });
      return "<tr data-id='" + a.id + "'><td>" + (td.join('</td><td>')) + "</td></tr>";
    });
    return "<table border=1>\n  <thead>\n    <tr><th>" + (k.join('</th><th>')) + "</th></tr>\n  </thead>\n  <tbody> " + (tr.join("\n")) + " </tbody>\n</table>";
  };

  Query = (function() {
    function Query(queryString, tables) {
      this.tables = tables;
      this.parseString(queryString);
      this.parseSelected();
      this.parseJoins();
      this.parseNaturalJoins();
    }

    Query.prototype.parseString = function(str) {
      var whereRegex;
      this.string = str.replace(/[\s\r\n]+/g, ' ').trim();
      this.selected = this.string.match(/SELECT (.*) FROM/)[1].split(', ');
      this.from = this.string.match(/FROM (\w+)/)[1];
      this.joins = this.string.match(/(INNER|NATURAL) JOIN \w+( ON \w+\.\w+ = \w+\.\w+)?/g);
      this.orderBy = (this.string.match(/ORDER BY (\w+)/) || [null, null])[1];
      this.sortDirection = (this.string.match(/ORDER BY \w+ (ASC|DESC)/) || [null, 'ASC'])[1];
      whereRegex = /WHERE ([\w\.]+)\s*(=|<|<=|>|>=|<>)\s*(('.*?')|([\d\.]+))/;
      if (this.string.match(whereRegex)) {
        return this.where = this.string.match(whereRegex).slice(1, 4);
      }
    };

    Query.prototype.parseSelected = function() {
      return this.columnData = _.map(this.selected, function(x) {
        return {
          displayAs: x.match(/(?:AS |\.)(\w+)$/)[1],
          sourceTable: x.match(/^\w+/)[0],
          sourceColumn: x.match(/\.(\w+)/)[1]
        };
      });
    };

    Query.prototype.parseJoins = function() {
      return this.joinData = _.map(this.joins, function(x, idx) {
        var a, joinData, out;
        joinData = x.match(/([A-Z]+ JOIN) (.*)/);
        if (joinData[1] === 'NATURAL JOIN') {
          out = {
            type: joinData[1],
            rTbl: joinData[2]
          };
        } else {
          a = x.match(/(\w+)\.(\w+) = (\w+)\.(\w+)/);
          out = {
            type: joinData[1],
            lTbl: a[1],
            lCol: a[2],
            rTbl: a[3],
            rCol: a[4]
          };
        }
        return out;
      });
    };

    Query.prototype.parseNaturalJoins = function() {
      return _.each(this.joinData, (function(_this) {
        return function(x, idx) {
          var commonColumns, parentColumns, parentIndex, parents;
          if (x.type === 'NATURAL JOIN') {
            parents = [_this.from].concat(_.pluck(_.first(_this.joinData, idx), 'rTbl'));
            parentColumns = _.map(parents, function(x) {
              return _this.tables[x].columns;
            });
            parentIndex = _.findIndex(parentColumns, function(a) {
              return _.intersection(a, _this.tables[x.rTbl].columns).length > 0;
            });
            commonColumns = _.intersection(tables[x.rTbl].columns, tables[parents[parentIndex]].columns);
            x.lTbl = parents[parentIndex];
            x.lCol = commonColumns[0];
            return x.rCol = commonColumns[0];
          }
        };
      })(this));
    };

    Query.prototype.joinPath = function(tgt) {
      var j;
      if (tgt === this.from) {
        return [];
      } else {
        j = _.findWhere(this.joinData, {
          rTbl: tgt
        });
        if (j.lTbl === this.from) {
          return [j];
        } else {
          return this.joinPath(j.lTbl).concat(j);
        }
      }
    };

    Query.prototype.columnMetadata = function(col) {
      return _.findWhere(this.columnData, {
        displayAs: col
      });
    };

    Query.prototype.listValues = function(col) {
      var columnData;
      columnData = this.columnMetadata(col);
      return this.tables[columnData.sourceTable].pluck(columnData.sourceColumn);
    };

    Query.prototype.objectPath = function(obj, col) {
      var colData, joins, nextObj;
      if (col.match(/\./)) {
        joins = this.joinPath(col.split('.')[0]);
      } else {
        colData = this.columnMetadata(col);
        joins = this.joinPath(colData.sourceTable);
      }
      nextObj = (function(_this) {
        return function(o, j) {
          return o.concat(_this.tables[j.rTbl].lookup(j.rCol, _.last(o).get(j.lCol)));
        };
      })(this);
      return _.foldl(joins, nextObj, [obj]);
    };

    Query.prototype.columnLookup = function(obj, col) {
      var lookupCol;
      if (col.match(/\./)) {
        lookupCol = col.split('.')[1];
      } else {
        lookupCol = this.columnMetadata(col).sourceColumn;
      }
      return _.last(this.objectPath(obj, col)).get(lookupCol);
    };

    Query.prototype.getObjectData = function(obj) {
      var k, v;
      k = _.pluck(this.columnData, 'displayAs');
      v = _.map(k, (function(_this) {
        return function(col) {
          return _this.columnLookup(obj, col);
        };
      })(this));
      return _.object(k, v);
    };

    Query.prototype.getAllData = function() {
      return this.tables[this.from].map((function(_this) {
        return function(obj) {
          return _this.getObjectData(obj);
        };
      })(this));
    };

    Query.prototype.getIdValues = function(obj) {
      var v;
      v = _.map(this.joinData, (function(_this) {
        return function(x) {
          return _this.columnLookup(obj, "" + x.rTbl + "." + x.rCol);
        };
      })(this));
      return _.object(_.pluck(this.joinData, 'rTbl'), v);
    };

    Query.prototype.setValue = function(obj, col, v) {
      var columnData, lastJoin, newId, parentObj;
      columnData = this.columnMetadata(col);
      if (columnData == null) {
        throw "Invalid column: " + col;
      }
      if (columnData.sourceTable === this.from) {
        return Backbone.Model.prototype.set.call(obj, col, v);
      } else {
        if (!_.contains(this.listValues(col), v)) {
          throw "Illegal value for '" + col + "': " + v;
        }
        lastJoin = _.last(this.joinPath(columnData.sourceTable));
        newId = this.tables[lastJoin.rTbl].lookup(columnData.sourceColumn, v).get(lastJoin.rCol);
        parentObj = this.objectPath(obj, col).slice(-2)[0];
        return parentObj.set(lastJoin.lCol, newId);
      }
    };

    Query.prototype.objectIncluded = function(obj) {
      var out, v1, v2;
      if (this.where != null) {
        v1 = this.columnLookup(obj, this.where[0]);
        v2 = this.where[2];
        if (v2[0] !== "'") {
          v2 = parseInt(v2);
        }
        return out = (function() {
          switch (this.where[1]) {
            case "=":
              return v1 === v2;
            case ">":
              return v1 > v2;
            case ">=":
              return v1 >= v2;
            case "<":
              return v1 < v2;
            case "<=":
              return v1 <= v2;
            case "<>":
              return v1 !== v2;
            default:
              return false;
          }
        }).call(this);
      } else {
        return out = true;
      }
    };

    return Query;

  })();

  QueryModel = (function(_super) {
    __extends(QueryModel, _super);

    function QueryModel() {
      return QueryModel.__super__.constructor.apply(this, arguments);
    }

    QueryModel.prototype.initialize = function() {
      return this.query = this.attributes.query;
    };

    QueryModel.prototype.obj = function() {
      return this.query.tables[this.query.from].get(this.id);
    };

    QueryModel.prototype.get = function(x) {
      return this.query.columnLookup(this.obj(), x);
    };

    QueryModel.prototype.set = function(a, b, opt) {
      if (_.isObject(a) && (a.id != null) && (a.query != null)) {
        return Backbone.Model.prototype.set.call(this, a, b, opt);
      } else {
        return this.query.setValue(this.obj(), a, b);
      }
    };

    QueryModel.prototype.toJSON = function() {
      return this.query.getObjectData(this.obj());
    };

    QueryModel.prototype.sourceTables = function() {
      return this.query.getIdValues(this.obj());
    };

    return QueryModel;

  })(Backbone.Model);

  QueryCollection = (function(_super) {
    __extends(QueryCollection, _super);

    function QueryCollection() {
      return QueryCollection.__super__.constructor.apply(this, arguments);
    }

    QueryCollection.prototype.model = QueryModel;

    QueryCollection.prototype.initialize = function(model, query) {
      this.query = query;
      if (query.orderBy != null) {
        this.comparator = query.orderBy;
      }
      query.tables[query.from].each((function(_this) {
        return function(x) {
          if (query.objectIncluded(x)) {
            return _this.add({
              id: x.id,
              query: query
            });
          }
        };
      })(this));
      query.tables[query.from].on({
        change: (function(_this) {
          return function(m) {
            return _this.trigger('change');
          };
        })(this),
        add: (function(_this) {
          return function(m) {
            return _this.add({
              id: m.id,
              query: _this.query
            });
          };
        })(this),
        remove: (function(_this) {
          return function(m) {
            return _this.remove(m.id);
          };
        })(this)
      });
      return _.each(_.pluck(this.query.joinData, 'rTbl'), (function(_this) {
        return function(x) {
          return query.tables[x].on('change', function() {
            return _this.trigger('change');
          });
        };
      })(this));
    };

    QueryCollection.prototype.sort = function(options) {
      if (options == null) {
        options = {};
      }
      this.models = this.sortBy(this.comparator, this);
      if (this.query.sortDirection === 'DESC') {
        this.models = this.models.reverse();
      }
      if (!options.silent) {
        this.trigger('sort', this, options);
      }
      return this;
    };

    QueryCollection.prototype.toTable = function() {
      return collectionToTable(this);
    };

    return QueryCollection;

  })(Backbone.Collection);

  TableListView = (function(_super) {
    __extends(TableListView, _super);

    function TableListView() {
      this.render = __bind(this.render, this);
      this.changeCallback = __bind(this.changeCallback, this);
      this.opt = __bind(this.opt, this);
      return TableListView.__super__.constructor.apply(this, arguments);
    }

    TableListView.prototype.initialize = function(options) {
      this.options = options;
      if (this.options.parent != null) {
        this.options.parent.options.children = this.options.parent.options.children || [];
        this.options.parent.options.children.push(this);
      }
      this.options.autoSelect = this.options.autoSelect != null ? this.options.autoSelect : true;
      this.render();
      return this.listenTo(this.model, 'all', function(ev) {
        if (ev !== 'sort') {
          return this.render();
        }
      });
    };

    TableListView.prototype.opt = function(x) {
      return "<option value='" + x.id + "'>" + (x.get(this.options.field)) + "</option>";
    };

    TableListView.prototype.changeCallback = function(options) {
      var k, newValue, optionData, v, x, _i, _len, _ref, _ref1;
      if (this.options.children != null) {
        _ref = this.options.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          x.render(this.options.triggerOptions);
        }
      }
      if ((this.options.linkedFormData != null) && (this.$el.val() != null)) {
        _ref1 = this.options.linkedFormData;
        for (k in _ref1) {
          v = _ref1[k];
          newValue = this.model.get(this.$el.val()).get(k);
          if (v.is('select') && !_.isNumber(newValue)) {
            optionData = v.find('option').map(function() {
              return [[$(this).html(), $(this).val()]];
            }).toArray();
            v.val(_.object(optionData)[newValue]);
          } else {
            v.val(newValue);
          }
          v.data('value', newValue);
          v.trigger('change', this.options.triggerOptions);
        }
      }
      if (this.options.postChange != null) {
        this.options.postChange();
      }
      return this;
    };

    TableListView.prototype.render = function(triggerOptions) {
      var mdl, oldSelection;
      oldSelection = this.$el.val() || this.$el.data('value');
      mdl = this.model.comparator != null ? this.model.sort() : this.model;
      if (this.options.filter != null) {
        mdl = this.options.filter(mdl);
      }
      if (_.isArray(mdl)) {
        this.$el.html(_.map(mdl, this.opt));
      } else {
        this.$el.html(mdl.map(this.opt));
      }
      if (this.options.autoSelect) {
        if (oldSelection != null) {
          this.$el.data('value', oldSelection).val(oldSelection);
          if (this.$el.val() == null) {
            this.$el[0].selectedIndex = 0;
          }
        } else {
          this.$el[0].selectedIndex = 0;
        }
      }
      this.$el.change(this.changeCallback);
      this.$el.trigger('change', triggerOptions);
      if (this.options.postRender != null) {
        return this.options.postRender();
      }
    };

    TableListView.prototype.getFormData = function() {
      var k, m, out, v, _ref;
      out = {};
      _ref = this.options.linkedFormData;
      for (k in _ref) {
        v = _ref[k];
        m = this.model.first();
        if (_.isNumber(m.get(k))) {
          out[k] = parseInt(v.val());
        } else {
          out[k] = v.val();
        }
      }
      return out;
    };

    TableListView.prototype.nDependencies = function() {
      if ((this.options.children != null) && (this.options.children[0].options.filter != null)) {
        return this.options.children[0].options.filter(this.options.children[0].model).length;
      } else {
        return 0;
      }
    };

    TableListView.prototype.deleteSelection = function() {
      var m;
      if (this.nDependencies() > 0) {
        return window.alert('Model has dependencies');
      } else {
        m = this.model.get(this.$el.val()).toJSON();
        if (window.confirm("Confirming deletion:\n" + (JSON.stringify(m)))) {
          return this.model.remove(this.$el.val());
        }
      }
    };

    TableListView.prototype.createFromSelection = function(options) {
      var formData;
      if (options == null) {
        options = {};
      }
      formData = _.omit(this.getFormData(), this.model.idAttribute);
      return this.model.create(formData, _.extend({
        wait: true,
        async: false
      }, options));
    };

    TableListView.prototype.updateFromSelection = function() {
      return this.model.get(this.$el.val()).set(this.getFormData());
    };

    return TableListView;

  })(Backbone.View);

  SendView = (function(_super) {
    __extends(SendView, _super);

    function SendView() {
      this.render = __bind(this.render, this);
      return SendView.__super__.constructor.apply(this, arguments);
    }

    SendView.prototype.initialize = function() {
      this.render();
      return this.listenTo(this.model, 'all', function(ev) {
        if (ev !== 'sort') {
          return this.render();
        }
      });
    };

    SendView.prototype.render = function() {
      this.$el.html(this.model.toTable());
      this.$el.find('table').addClass('pure-table');
      return this.$el.find('table > tbody > tr').click(function() {
        var route, send;
        send = sends.get($(this).attr('data-id'));
        route = routes.get(send.sourceTables().routes);
        gui.sends.$date.val(send.get('Date'));
        gui.sends.$route.val(send.get('Route'));
        gui.sends.$climber.val(send.sourceTables().climbers);
        gui.sends.$grade.val(send.sourceTables().grades);
        gui.sends.$style.val(send.sourceTables().ascent_styles);
        gui.sends.$area.val(route.sourceTables().areas);
        gui.sends.$area.trigger('change');
        gui.sends.$cliff.val(route.sourceTables().cliffs);
        gui.sends.$send_id.val(send.id);
        gui.sends.$route_id.val(send.sourceTables().routes);
        return window.scrollTo(0, 0);
      });
    };

    return SendView;

  })(Backbone.View);

  QueryOrphans = (function(_super) {
    __extends(QueryOrphans, _super);

    function QueryOrphans() {
      this.render = __bind(this.render, this);
      return QueryOrphans.__super__.constructor.apply(this, arguments);
    }

    QueryOrphans.prototype.initialize = function() {
      this.render();
      return this.listenTo(this.model, 'all', function(ev) {
        if (ev !== 'sort') {
          return this.render();
        }
      });
    };

    QueryOrphans.prototype.render = function() {
      var childOrphans, lKeys, orphans, parentOrphans, rKeys, x, _i, _len, _ref;
      _ref = this.model.query.joinData;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        lKeys = tables[x.lTbl].pluck(x.lCol);
        rKeys = tables[x.rTbl].pluck(x.rCol);
        parentOrphans = _.difference(lKeys, rKeys);
        childOrphans = _.difference(rKeys, lKeys);
        if (parentOrphans.length > 0) {
          orphans = tables[x.lTbl].filter(function(a) {
            return _.contains(parentOrphans, a.get(x.lCol));
          });
          collectionToTable(orphans);
          this.$el.append("<h2>" + x.lTbl + " -> " + x.rTbl + "</h2>\n" + collectionToTable(orphans));
        }
        if (childOrphans.length > 0) {
          orphans = tables[x.rTbl].filter(function(a) {
            return _.contains(childOrphans, a.get(x.rCol));
          });
          collectionToTable(orphans);
          this.$el.append("<h2>" + x.lTbl + " -> " + x.rTbl + "</h2>\n" + collectionToTable(orphans));
        }
      }
      this.$el.find('table').addClass('pure-table');
      return this;
    };

    return QueryOrphans;

  })(Backbone.View);

  jQuery(function() {
    var DummyView, createRouteIfNew;
    window.gui = {
      sends: {
        $date: $('input#send_date'),
        $style: $('select#send_style'),
        $climber: $('select#send_climber'),
        $route: $('input#send_route'),
        $routeSel: $('select#routeSelect'),
        $grade: $('select#send_grade'),
        $area: $('select#send_area'),
        $cliff: $('select#send_cliff'),
        $send_id: $('input#send_id'),
        $route_id: $('input#send_route_id')
      },
      areas: {
        $area: $('select#area_area'),
        $cliff: $('select#area_cliff'),
        $route: $('select#area_route'),
        $area_name: $('input#area_area_name'),
        $area_location: $('input#area_area_location'),
        $cliff_name: $('input#area_cliff_name'),
        $cliff_parent: $('select#area_cliff_parent'),
        $route_name: $('input#area_route_name'),
        $route_grade: $('select#area_route_grade'),
        $route_parent: $('select#area_route_parent')
      },
      visualization: {
        $send_table: $('div#SendTable'),
        $route_orphans: $('div#RouteOrphans'),
        $send_orphans: $('div#SendOrphans')
      }
    };
    window.tables = {};
    $.ajax({
      url: '/tables',
      dataType: 'json',
      async: false,
      success: function(x) {
        var a, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = x.length; _i < _len; _i++) {
          a = x[_i];
          _results.push($.ajax({
            url: "/tables/" + a.name,
            dataType: 'json',
            async: false,
            success: function(y) {
              return window.tables[a.name] = convertTable(y, a.name, a.id);
            }
          }));
        }
        return _results;
      }
    });
    window.sends = new QueryCollection(null, new Query(sendQuery, tables));
    window.routes = new QueryCollection(null, new Query(routeQuery, tables));
    tables['grades'].comparator = 'grade_sort';
    tables['cliffs'].comparator = 'cliff_name';
    tables['routes'].comparator = 'name';
    tables['areas'].comparator = 'area_name';
    tables['climbers'].comparator = 'display';
    gui.sends.$date[0].valueAsDate = new Date();
    gui.sends.climberView = new TableListView({
      model: tables.climbers,
      el: gui.sends.$climber,
      field: 'display',
      filter: function(x) {
        return x.where({
          enabled: 1
        });
      }
    });
    gui.sends.styleView = new TableListView({
      model: tables.ascent_styles,
      el: gui.sends.$style,
      field: 'style_name'
    });
    gui.sends.gradeView = new TableListView({
      model: tables.grades,
      el: gui.sends.$grade,
      field: 'grade'
    });
    gui.sends.areaView = new TableListView({
      model: tables.areas,
      el: gui.sends.$area,
      field: 'area_name'
    });
    gui.sends.cliffView = new TableListView({
      model: tables.cliffs,
      el: gui.sends.$cliff,
      field: 'cliff_name',
      filter: function(x) {
        return x.where({
          area_id: parseInt(gui.sends.$area.val())
        });
      },
      parent: gui.sends.areaView
    });
    DummyView = (function(_super) {
      __extends(DummyView, _super);

      function DummyView() {
        return DummyView.__super__.constructor.apply(this, arguments);
      }

      DummyView.prototype.render = function() {};

      return DummyView;

    })(TableListView);
    gui.sends.sendView = new DummyView({
      model: tables.ascents,
      el: gui.sends.$send_id,
      linkedFormData: {
        route_id: gui.sends.$route_id,
        climber_id: gui.sends.$climber,
        style_id: gui.sends.$style,
        send_date: gui.sends.$date
      }
    });
    gui.sends.routeView = new DummyView({
      model: tables.routes,
      el: gui.sends.$route_id,
      linkedFormData: {
        name: gui.sends.$route,
        grade_id: gui.sends.$grade,
        cliff_id: gui.sends.$cliff
      }
    });
    gui.areas.gradeView = new TableListView({
      model: tables.grades,
      el: gui.areas.$route_grade,
      field: 'grade'
    });
    gui.areas.areaView = new TableListView({
      model: tables.areas,
      el: gui.areas.$area,
      field: 'area_name',
      linkedFormData: {
        area_name: gui.areas.$area_name,
        location: gui.areas.$area_location,
        area_id: gui.areas.$cliff_parent
      }
    });
    gui.areas.cliffView = new TableListView({
      model: tables.cliffs,
      el: gui.areas.$cliff,
      field: 'cliff_name',
      filter: function(x) {
        return x.where({
          area_id: parseInt(gui.areas.$area.val())
        });
      },
      parent: gui.areas.areaView,
      linkedFormData: {
        cliff_name: gui.areas.$cliff_name,
        cliff_id: gui.areas.$route_parent,
        area_id: gui.areas.$cliff_parent
      }
    });
    gui.areas.cliffParentView = new TableListView({
      model: tables.areas,
      el: gui.areas.$cliff_parent,
      field: 'area_name',
      parent: gui.areas.areaView
    });
    gui.areas.routeView = new TableListView({
      model: tables.routes,
      el: gui.areas.$route,
      field: 'name',
      filter: function(x) {
        return x.where({
          cliff_id: parseInt(gui.areas.$cliff.val())
        });
      },
      parent: gui.areas.cliffView,
      linkedFormData: {
        name: gui.areas.$route_name,
        grade_id: gui.areas.$route_grade,
        cliff_id: gui.areas.$route_parent
      }
    });
    gui.areas.routeView.nDependencies = function() {
      var routeId;
      routeId = this.model.get(this.$el.val()).get('route_id');
      return tables.ascents.where({
        route_id: routeId
      }).length;
    };
    gui.areas.routeParentView = new TableListView({
      model: tables.cliffs,
      el: gui.areas.$route_parent,
      field: 'cliff_name',
      filter: function(x) {
        return x.where({
          area_id: parseInt(gui.areas.$area.val())
        });
      },
      parent: gui.areas.cliffView
    });
    gui.sends.routeSearchView = new TableListView({
      model: routes,
      el: gui.sends.$routeSel,
      field: 'Route',
      filter: function(x) {
        var searchText;
        searchText = $('input#send_route').val().toLowerCase();
        return x.filter(function(x) {
          return x.get('Route').toLowerCase().indexOf(searchText) > -1;
        });
      },
      linkedFormData: {
        ID: gui.sends.$route_id,
        Route: gui.sends.$route,
        Grade: gui.sends.$grade,
        Area: gui.sends.$area,
        Cliff: gui.sends.$cliff
      },
      autoSelect: false,
      triggerOptions: {
        ignoreChanges: true
      },
      postChange: function() {
        gui.sends.$route_id.val($(this.el).val());
        return gui.sends.$send_id.val('');
      }
    });
    gui.sends.routeSearchView.opt = function(x) {
      return "<option value='" + x.id + "'>\n " + (x.get('Route')) + " (" + (x.get('Grade')) + ", " + (x.get('Area')) + ")\n</option>";
    };
    gui.sends.$route.keyup(function() {
      gui.sends.routeSearchView.render();
      return gui.sends.$route_id.val('');
    });
    gui.sends.$area.add(gui.sends.$cliff).add(gui.sends.$grade).add(gui.sends.$route).change(function(ev, opt) {
      if (!((opt != null) && opt.ignoreChanges)) {
        gui.sends.$route_id.val('');
        return gui.sends.$send_id.val('');
      }
    });
    $('button#route_create').click(function() {
      return gui.areas.routeView.createFromSelection();
    });
    $('button#route_update').click(function() {
      return gui.areas.routeView.updateFromSelection();
    });
    $('button#route_delete').click(function() {
      return gui.areas.routeView.deleteSelection();
    });
    $('button#cliff_create').click(function() {
      return gui.areas.cliffView.createFromSelection();
    });
    $('button#cliff_update').click(function() {
      return gui.areas.cliffView.updateFromSelection();
    });
    $('button#cliff_delete').click(function() {
      return gui.areas.cliffView.deleteSelection();
    });
    $('button#area_create').click(function() {
      return gui.areas.areaView.createFromSelection();
    });
    $('button#area_update').click(function() {
      return gui.areas.areaView.updateFromSelection();
    });
    $('button#area_delete').click(function() {
      return gui.areas.areaView.deleteSelection();
    });
    createRouteIfNew = function() {
      if (gui.sends.$route_id.val() === "") {
        return gui.sends.$route_id.val(gui.sends.routeView.createFromSelection().id);
      }
    };
    $('button#send_create').click(function() {
      createRouteIfNew();
      return gui.sends.$send_id.val(gui.sends.sendView.createFromSelection().id);
    });
    $('button#send_update').click(function() {
      createRouteIfNew();
      if (gui.sends.$send_id.val() !== "") {
        return gui.sends.sendView.updateFromSelection();
      } else {
        return window.alert('Nothing to update');
      }
    });
    $('button#send_delete').click(function() {
      if (gui.sends.$send_id.val() !== "") {
        gui.sends.sendView.deleteSelection();
        return gui.sends.$send_id.val('');
      } else {
        return window.alert('Nothing to delete');
      }
    });
    gui.visualization.sendView = new SendView({
      model: sends,
      el: gui.visualization.$send_table
    });
    gui.visualization.$route_orphans.html('<a style="color:blue; cursor:pointer">Create view</a>').click(function() {
      $(this).html('');
      return gui.visualization.routeOrphans = new QueryOrphans({
        model: routes,
        el: gui.visualization.$route_orphans
      });
    });
    return gui.visualization.$send_orphans.html('<a style="color:blue; cursor:pointer">Create view</a>').click(function() {
      $(this).html('');
      return gui.visualization.sendOrphans = new QueryOrphans({
        model: sends,
        el: gui.visualization.$send_orphans
      });
    });
  });

}).call(this);
